<script type="text/javascript">
  // src/utils/installPromptHandler.js
  // Simplified handler that allows browser's native install prompt

  class InstallPromptHandler {
    constructor() {
      this.deferredPrompt = null;
      this.isInstalled = false;
      this.init();
    }

    init() {
      // Check if already installed
      this.checkIfInstalled();

      // Listen for install events
      this.setupEventListeners();
    }

    checkIfInstalled() {
      // Check if running in standalone mode
      if (window.matchMedia("(display-mode: standalone)").matches) {
        this.isInstalled = true;
        return true;
      }

      // Check if running as PWA on iOS
      if (window.navigator.standalone === true) {
        this.isInstalled = true;
        return true;
      }

      return false;
    }

    setupEventListeners() {
      // Handle beforeinstallprompt - DON'T prevent default to allow automatic banner
      window.addEventListener("beforeinstallprompt", (e) => {
        // Store the event for potential custom use later
        this.deferredPrompt = e;

        // DON'T call e.preventDefault() - let browser show native prompt
        // e.preventDefault(); // <-- Remove this line!

        // Dispatch custom event for your app to know it's installable
        window.dispatchEvent(
          new CustomEvent("pwa-installable", {
            detail: {
              canInstall: true,
              promptEvent: e,
            },
          })
        );
      });

      // Handle successful installation
      window.addEventListener("appinstalled", (e) => {
        this.isInstalled = true;
        this.deferredPrompt = null;

        // Dispatch custom event
        window.dispatchEvent(new CustomEvent("pwa-installed"));
      });
    }

    // Optional: Method to trigger install programmatically (if you prevented default)
    async showInstallPrompt() {
      if (!this.deferredPrompt) {
        return false;
      }

      try {
        // Show the install prompt
        this.deferredPrompt.prompt();

        // Wait for user choice
        const result = await this.deferredPrompt.userChoice;

        // Clear the deferred prompt
        this.deferredPrompt = null;

        return result.outcome === "accepted";
      } catch (error) {
        console.error("Error showing install prompt:", error);
        return false;
      }
    }

    // Check if install prompt is available
    canShowInstallPrompt() {
      return !!this.deferredPrompt && !this.isInstalled;
    }

    // Get installation status
    getInstallationStatus() {
      return {
        isInstalled: this.isInstalled,
        canInstall: !!this.deferredPrompt,
        isStandalone: window.matchMedia("(display-mode: standalone)").matches,
      };
    }
  }

  // Initialize the handler
  const installHandler = new InstallPromptHandler();

  // Make it available globally for debugging
  if (typeof window !== "undefined") {
    window.InstallHandler = installHandler;
  }

  //   code use

  // Simple install prompt handler that allows native browser prompts
  let deferredPrompt = null;
  let isInstalled = false;

  // Check if already installed
  function checkInstallStatus() {
    if (
      window.matchMedia("(display-mode: standalone)").matches ||
      window.navigator.standalone === true
    ) {
      isInstalled = true;
      return true;
    }
    return false;
  }

  // Handle beforeinstallprompt - Allow native prompt to show
  window.addEventListener("beforeinstallprompt", (e) => {
    // Store the event (optional, for custom triggers later)
    deferredPrompt = e;

    // DON'T prevent default - let browser show native install prompt
    // This allows the automatic install banner/button to appear

    // Optional: Dispatch custom event for your app
    window.dispatchEvent(
      new CustomEvent("pwa-can-install", {
        detail: { canInstall: true },
      })
    );
  });

  // Handle successful installation
  window.addEventListener("appinstalled", () => {
    isInstalled = true;
    deferredPrompt = null;
  });

  // Check install status on load
  window.addEventListener("load", () => {
    checkInstallStatus();
  });

  // Optional: Custom install function (if you want to trigger manually)
  window.triggerInstall = async function () {
    if (deferredPrompt && !isInstalled) {
      try {
        deferredPrompt.prompt();
        const result = await deferredPrompt.userChoice;
        deferredPrompt = null;
        return result.outcome === "accepted";
      } catch (error) {
        console.error("Install error:", error);
        return false;
      }
    }
    return false;
  };
</script>
